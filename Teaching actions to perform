def sendEmail(to, content):
#self defined function
    server = smtplib.SMTP('smtp.gmail.com', 587)
#In order to submit emails securely for delivery, modern email servers employ port 587.
    server.ehlo()
#When connecting to another email server to begin the process of sending an email, an email server sends the Extended HELO (EHLO) Extended Simple Mail Transfer Protocol (ESMTP) command to identify itself.
    server.starttls()
#To inform the email server that the email client wants to utilise a secure connection using TLS or SSLmail, use the StartTLS extension of the SMTP protocol.
    
    # Enable low security in gmail
    server.login('your email id', 'your email password')
    server.sendmail('your email id', to, content)
    server.close()


if __name__ == '__main__':
    clear = lambda: os.system('cls')
    
    # This Function will clean any
    # command before execution of this python file
    clear()
    wishMe()
    username()
    
    while True:
        
        query = takeCommand().lower()
        
        # All the commands said by user will be
        # stored here in 'query' and will be
        # converted to lower case for easily
        # recognition of command
        if 'wikipedia' in query:
            speak('Searching Wikipedia...')
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences = 3)
            speak("According to Wikipedia")
            print(results)
            speak(results)
#open youtube
        elif 'open youtube' in query:
            speak("Here you go to Youtube\n")
            webbrowser.open("youtube.com")

        elif'Who is Roll no 1' in query:
            speak("Suja")

        elif'Who is Roll no 2' in query:
            speak("Aneeza")

        elif'Who is Roll no 3' in query:
            speak("Suja")

        elif'Who is Roll no 4' in query:
            speak("Suja")

        elif'Who is Roll no 5' in query:
            speak("Suja")

        elif'Who is Roll no 6' in query:
            speak("Suja")
            
        elif'Who is Roll no 7' in query:
            speak("Suja")

        elif'Who is Roll no 8' in query:
            speak("Suja")

        elif'Who is Roll no 9' in query:
            speak("Suja")

        elif'Who is Roll no 10' in query:
            speak("Suja")

        elif'Who are your designenrs' in query:
            speak("Ferhan Ansari..Zoef Markande..Asad Qqureshi..Zaid Dosani..Arshad Mulla")
#open google
        elif 'open google' in query:
            speak("Here you go to Google\n")
            webbrowser.open("google.com")
#Play music
        elif 'play music' in query or "play song" in query:
            speak("Here you go with music")
            # music_dir = "G:\\Song"
            #Location of the file where the music file has been saved.
            music_dir = "C:\\Users\\Ferhan Ansari\\OneDrive\\Desktop\\OneDrive\\Pictures\\Extra Activities\\Naat"
            songs = os.listdir(music_dir)
            print(songs)
            random = os.startfile(os.path.join(music_dir, songs[1]))
#informs about the time
        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("% H:% M:% S")
            speak(f"Sir, the time is {strTime}")
#informs about the date 
        elif 'the date' in query:
            strTime = datetime.datetime.now().strftime("% D:% M:% Y")
            speak(f"Sir, the time is {strTime}")

#For mailing
        elif 'email to Zoef Markande' in query:
            try:
                speak("What ought I to say?")
                content = takeCommand()
                to = "Receiver email address"
                sendEmail(to, content)
                speak("Email has been sent !")
            except Exception as e:
                print(e)
                speak("I am not able to send this email")

        elif 'send a mail' in query:
            try:
                speak("What ought I to say?")
                content = takeCommand()
                speak("Whom do I email this to?")
                to = input()
                sendEmail(to, content)
                speak("Email has been delivered!")
            except Exception as e:
                print(e)
                speak("I can't send this email, sorry.")
#Normal Converstaion
        elif 'how are you' in query:
            speak("I'm good, thanks for asking.")
            speak("What's up, sir?")
#Greetings
        elif 'fine' in query or "good" in query:
            speak("Being in good health is encouraging.")
#Changing of name using replace function
        elif "change my name to" in query:
            query = query.replace("I'll be calling myself", "")
            assname = query

        elif "change name" in query:
            speak("How may I be addressed, Sir? ")
            assname = takeCommand()
            speak("I appreciate being given that name.")
#Recongnition
        elif "who are you, please" in query or "who are you, please?" in query:
            speak("My pals call me")
            speak(assname)
            print("My pals call me", assname)
#exiting the conversation
        elif 'exit' in query:
            speak("Thanks for spending time with me.")
            exit()
#personal enquiry
        elif "who produced you" in query or "one who formed you" in query:
            speak("I have been created by Ferhan Ansari..Asad Qureshi..Zoef Markande..Zaid Dosani..Arshad Mulla")
#jokes     
        elif 'joke' in query:
            speak(pyjokes.get_joke())
#telling Jokes    
        elif "calculate" in query:
            
            app_id = "Wolframalpha api id"
            client = wolframalpha.Client(app_id)
            indx = query.lower().split().index('calculate')
            query = query.split()[indx + 1:]
            res = client.query(' '.join(query))
            answer = next(res.results).text
            print(The solution is " + answer)
            speak("The solution is" + answer)
#Browsing
        elif 'search' in query or 'play' in query:
            
            query = query.replace("search", "")
            query = query.replace("play", "")		
            webbrowser.open(query)

        elif "whom I am" in query:
            speak("You are unquestionably a person if you can converse.")

        elif "the reason you entered the world" in query:
            speak("Thanks to Ferhan Ansari..Asad Qureshi..Zoef Markande..Zaid Dosani..Arshad Mulla..further It's a secret")

        elif 'is love' in query:
            speak("It is the seventh sense is what renders the others useless.")

        elif "whom are you?" in query:
            speak("I'm your virtual helper. Designed by Ferhan Ansari..Zoef Markande..Zaid Dosani..Asad Qureshi..Arshad Mulla")

        elif 'reason for you' in query:
            speak("I was created as a Minor project by Mister Gaurav ")
#Changing in the background of the desktop on which the code would run.
        elif 'modify the background' in query:
            ctypes.windll.user32.SystemParametersInfoW(20,0,"Location of wallpaper",0)
            speak("Background successfully updated.")
#News paste the link of the news channel under json obj.a common text-based format based on JavaScript object syntax for displaying structured data.
        elif 'news' in query:
            
            try:
                jsonObj = urlopen('''https://newsapi.org / v1 / articles?source = the-times-of-india&sortBy = top&apiKey =\\times of India Api key\\''')
                data = json.load(jsonObj)
                i = 1
                
                speak('here are some top news from the times of india')
                print('''=============== TIMES OF INDIA ============'''+ '\n')
                
                for item in data['articles']:
                    
                    print(str(i) + '. ' + item['title'] + '\n')
                    print(item['description'] + '\n')
                    speak(str(i) + '. ' + item['title'] + '\n')
                    i += 1
            except Exception as e:
                
                print(str(e))
#Lock window of the desktop on which the code is running.
        elif 'lock window' in query:
                speak("locking the device")
                ctypes.windll.user32.LockWorkStation()
|#
        elif 'shutdown system' in query:
                speak("Hold On a Sec ! Your system is on its way to shut down")
                subprocess.call('shutdown / p /f')
                
        elif 'empty recycle bin' in query:
            winshell.recycle_bin().empty(confirm = False, show_progress = False, sound = True)
            speak("Recycle Bin Recycled")

        elif "don't listen" in query or "stop listening" in query:
            speak("for how much time you want to stop jarvis from listening commands")
            a = int(takeCommand())
            time.sleep(a)
            print(a)
# will mark the location where the device would be
        elif "where is" in query:
            query = query.replace("where is", "")
            location = query
            speak("User asked to Locate")
            speak(location)
            webbrowser.open("https://www.google.nl / maps / place/" + location + "")
#click pictures as per the command
        elif "camera" in query or "take a photo" in query:
            ec.capture(0, "Alexander Camera ", "img.jpg")
#restarts the device on which the code is compiled.
        elif "restart" in query:
            subprocess.call(["shutdown", "/r"])
#hibernates the device on which the code is compiled.     
        elif "hibernate" in query or "sleep" in query:
            speak("Hibernating")
            subprocess.call("shutdown / h")
#Logs off the device on which the code is compiled.
        elif "log off" in query or "sign out" in query:
            speak("Make sure all the application are closed before sign-out")
            time.sleep(5)
            subprocess.call(["shutdown", "/l"])
#writes a note in a notepad and saves it with the given name under file variables on the device on the code is compiled.
        elif "write a note" in query:
            speak("What should i write, sir")
            note = takeCommand()
            file = open('Alexander.txt', 'w')
            speak("Sir, Should i include date and time")
            snfm = takeCommand()
            if 'yes' in snfm or 'sure' in snfm:
                strTime = datetime.datetime.now().strftime("% H:% M:% S")
                file.write(strTime)
                file.write(" :- ")
                file.write(note)
            else:
                file.write(note)
        
        elif "show note" in query:
            speak("Showing Notes")
            file = open("Alexander.txt", "r")
            print(file.read())
            speak(file.read(6))

        elif "update assistant" in query:
            speak(Please replace this file with the one you just received after downloading.")
            url = '# url after uploading file'
            r = requests.get(url, stream = True)
            
            with open("Voice.py", "wb") as Pypdf:
                
                total_length = int(r.headers.get('content-length'))
                
                for ch in progress.bar(r.iter_content(chunk_size = 2391975),
                                    expected_size =(total_length / 1024) + 1):
                    if ch:
                        Pypdf.write(ch)
                    
        # will wake up listening the command.
        elif "Alexander" in query:
            
            wishMe()
            speak("Alexander 1 point o in your service Mister")
            speak(assname)
#informs more about weather
        elif "weather" in query:
            
            # Google Open weather website
            # to get API of Open weather
            api_key = "Api key"
            base_url = "http://api.openweathermap.org / data / 2.5 / weather?"
            speak(" City name ")
            print("City name : ")
            city_name = takeCommand()
            complete_url = base_url + "appid =" + api_key + "&q =" + city_name
            response = requests.get(complete_url)
            x = response.json()
            
            if x["code"] != "404":
                y = x["main"]
                current_temperature = y["temp"]
                current_pressure = y["pressure"]
                current_humidiy = y["humidity"]
                z = x["weather"]
                weather_description = z[0]["description"]
                print(" Temperature (in kelvin unit) = " +str(current_temperature)+"\n atmospheric pressure (in hPa unit) ="+str(current_pressure) +"\n humidity (in percentage) = " +str(current_humidiy) +"\n description = " +str(weather_description))
            
            else:
                speak(" City Not Found ")
            
        elif "send message " in query:
                # You need to create an account on Twilio to use this service
                account_sid = 'Account Sid key'
                auth_token = 'Auth token'
                client = Client(account_sid, auth_token)

                message = client.messages \
                                .create(
                                    body = takeCommand(),
                                    from_='Sender No',
                                    to ='Receiver No'
                                )

                print(message.sid)

        elif "wikipedia" in query:
            webbrowser.open("wikipedia.com")

        elif "Good Morning" in query:
            speak("A warm" +query)
            speak("How are you Mister")
            speak(assname)

        # most asked question from google Assistant
        elif "will you be my gf" in query or "will you be my bf" in query:
            speak("I'm not sure about, may be you should give me some time")

        elif "how are you" in query:
            speak("I'm fine, glad you me that")

        elif "i love you" in query:
            speak("It's hard to understand")

        elif "what is" in query or "who is" in query:
            
            # Use the same API key
            # that we have generated earlier
            client = wolframalpha.Client("API_ID")
            res = client.query(query)
            
            try:
                print (next(res.results).text)
                speak (next(res.results).text)
            except StopIteration:
                print ("No results")

        # elif "" in query:
            # Command go here
            # For adding more commands
